class Story < ActiveRecord::Base
  has_many :paragraphs
  has_many :sentences, through: :paragraphs
  has_many :comments,  -> { order(created_at: :desc) }, through: :sentences
  validates :title, presence: true
  validates :course_id, presence: true
  belongs_to :course

  def most_commented
    # This ruby should be replaced by activerecord query
    self.sentences.sort_by {|sentence| sentence.comment_count}.reverse[0..4]
  end

  def self.make(title, author, body, course_id)
  # Sanitize the body
    body = self.ignore_unnecessary_line_breaks(body)
  # Create story in database
    story = Story.create(title: title, author: author, course_id: course_id)
  # Paragraphs is an array of paragraphs generated by splitting the body at new lines
    paragraphs = body.split /[\r\n]+/
  # Removing blank space
    paragraphs.reject! {|line| line.blank?}
  # Make paragraphs
    self.paragraph_maker(paragraphs, story.id)
    story
  end

  private
  PARSER = TactfulTokenizer::Model.new
  def self.paragraph_maker(paragraphs, story_id)
    paragraphs.each do |paragraph|
      paragraph_object = Paragraph.create(story_id: story_id)
      sentences = self.parse_to_sentences(paragraph)
      self.sentence_maker(sentences, paragraph_object.id)
    end
  end

  def self.parse_to_sentences(paragraph)
    PARSER.tokenize_text(paragraph)
  end

  def self.sentence_maker(sentences, paragraph_id)
    sentences.each do |sentence|
      Sentence.create!(body: sentence, paragraph_id: paragraph_id)
    end
  end

  def self.ignore_unnecessary_line_breaks(text)
    punctuation = [".", "?", "!", '"']
    text = text.split("")
    text = text.map.with_index do |char, index| 
      if char == "\n" && !punctuation.include?(text[index - 1])
        " "
      else
        char
      end
    end
    text.join("")
  end
end
